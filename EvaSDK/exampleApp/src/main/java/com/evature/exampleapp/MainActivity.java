package com.evature.exampleapp;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.graphics.Color;import android.os.Bundle;import android.os.Handler;import android.preference.PreferenceManager;import android.support.design.widget.NavigationView;import android.support.v4.app.ActivityCompat;import android.support.v4.content.LocalBroadcastManager;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.SpannableStringBuilder;import android.text.Spanned;import android.text.TextUtils;import android.text.method.LinkMovementMethod;import android.text.style.ForegroundColorSpan;import android.text.style.RelativeSizeSpan;import android.text.style.StyleSpan;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ExpandableListView;import android.widget.TextView;import android.widget.Toast;import com.evature.evasdk.EvaChatTrigger;import com.evature.evasdk.appinterface.EvaAppScope;import com.evature.evasdk.appinterface.EvaAppSetup;import com.evature.evasdk.appinterface.EvaCarSearch;import com.evature.evasdk.appinterface.EvaCruiseSearch;import com.evature.evasdk.appinterface.EvaFlightNavigate;import com.evature.evasdk.appinterface.EvaFlightSearch;import com.evature.evasdk.appinterface.EvaHotelSearch;import com.evature.evasdk.appinterface.EvaInitResult;import com.evature.evasdk.appinterface.EvaPermissionsRequiredHandler;import com.evature.evasdk.appinterface.EvaReservationHandler;import com.evature.evasdk.appinterface.EvaResult;import com.evature.evasdk.evaapis.crossplatform.CruiseAttributes;import com.evature.evasdk.evaapis.crossplatform.EvaLocation;import com.evature.evasdk.evaapis.crossplatform.EvaTravelers;import com.evature.evasdk.evaapis.crossplatform.FlightAttributes;import com.evature.evasdk.evaapis.crossplatform.HotelAttributes;import com.evature.evasdk.evaapis.crossplatform.RequestAttributes;import com.google.firebase.iid.FirebaseInstanceId;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Random;import java.util.concurrent.Callable;import java.util.concurrent.FutureTask;import static android.R.attr.id;import static com.evature.evasdk.EvaChatScreenComponent.TOKEN_REFRESHED_EVENT;import static com.evature.evasdk.appinterface.EvaAppSetup.siteCode;public class MainActivity extends AppCompatActivity        implements NavigationView.OnNavigationItemSelectedListener,        EvaInitResult, EvaPermissionsRequiredHandler,        EvaFlightNavigate, EvaHotelSearch, EvaCarSearch, EvaFlightSearch, EvaCruiseSearch, EvaReservationHandler {    ExpandableListAdapter listAdapter;    ExpandableListView expListView;    List<String> listDataHeader;    HashMap<String, List<CharSequence>> listDataChild;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        TextView tv = (TextView) findViewById(R.id.mainTextView);        tv.setMovementMethod(LinkMovementMethod.getInstance());        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);        drawer.setDrawerListener(toggle);        toggle.syncState();        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);        navigationView.setNavigationItemSelectedListener(this);        expListView = (ExpandableListView) findViewById(R.id.lvExp);        listDataHeader = new ArrayList<String>();        listDataChild = new HashMap<String, List<CharSequence>>();        listAdapter = new ExpandableListAdapter(this, listDataHeader, listDataChild);        expListView.setAdapter(listAdapter);        EvaAppSetup.locationTracking = false;        EvaAppSetup.evaLogs(true);        // this will add a default float-action button        EvaChatTrigger.addDefaultButton(this);    }    @Override    public void onBackPressed() {        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);        if (drawer.isDrawerOpen(GravityCompat.START)) {            drawer.closeDrawer(GravityCompat.START);        } else {            super.onBackPressed();        }    }    private static final String API_KEY = "c61da182-868c-4f1b-a291-a70fc79fd8d2";    private static final String SITE_CODE = "evadev";    public BroadcastReceiver gcmTokenReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            if (intent != null ) {                String token = intent.getStringExtra("token");                SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(MainActivity.this);                TextView tv = (TextView) findViewById(R.id.mainTextView);                String siteCode = prefs.getString("site_code", SITE_CODE);                String apiKey = prefs.getString("api_key", API_KEY);                if (apiKey.equals(EvaAppSetup.apiKey) == false || siteCode.equals(siteCode) == false) {                    tv.setText(R.string.checking_credentials);                    EvaAppSetup.initEva(apiKey, siteCode, MainActivity.this);  // the check results will be to the "initResult" callback                } else {                    tv.setVisibility(View.GONE);                }            }        }    };    @Override    public void onResume() {        super.onResume();        LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(this);        localBroadcastManager.registerReceiver(gcmTokenReceiver, new IntentFilter(TOKEN_REFRESHED_EVENT));        // normally your app credentials won't change and would be hard-coded once when the application loads        // eg.  something like  EvaAppSetup.initEva('my-site-code', 'my-api-key', ...);        // this app allows changing the credentials...        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);        TextView tv = (TextView) findViewById(R.id.mainTextView);        String siteCode = prefs.getString("site_code", SITE_CODE);        String apiKey = prefs.getString("api_key", API_KEY);        if (apiKey == null || siteCode == null) {            tv.setText(R.string.no_credentials);            return;        }        NavigationView nav = (NavigationView) findViewById(R.id.nav_view);        ((TextView)nav.getHeaderView(0).findViewById(R.id.textViewNavigationSubHeader)).setText("Site Code: "+siteCode);        if (EvaAppSetup.gcmToken == null) {            tv.setText("Fetching GCM Token");            EvaAppSetup.apiKey = null;            EvaInstanceIDListenerService.refreshToken(this);        }        else {            if (apiKey.equals(EvaAppSetup.apiKey) == false || siteCode.equals(siteCode) == false) {                tv.setText(R.string.checking_credentials);                EvaAppSetup.initEva(apiKey, siteCode, this);  // the check results will be to the "initResult" callback            } else {                tv.setVisibility(View.GONE);            }        }        String vproxy = prefs.getString("vproxy_url", null);        if (vproxy != null && !vproxy.equals("")) {            EvaAppSetup.vproxyHost = vproxy;        }        else {            EvaAppSetup.vproxyHost = null;        }        // update scope menu from preferences        Menu menu = nav.getMenu();        menu.findItem(R.id.nav_car).setChecked(prefs.getBoolean("scope_car", false));        menu.findItem(R.id.nav_flight).setChecked(prefs.getBoolean("scope_flight", false));        menu.findItem(R.id.nav_cruise).setChecked(prefs.getBoolean("scope_cruise", false));        menu.findItem(R.id.nav_hotel).setChecked(prefs.getBoolean("scope_hotel", true));        menu.findItem(R.id.nav_explore).setChecked(prefs.getBoolean("scope_explore", false));        EvaAppScope[] scopeArr = getScopeFromPreference();        EvaAppSetup.setScope(scopeArr);        boolean autoOpenMic = prefs.getBoolean("auto_open_mic", false);        menu.findItem(R.id.nav_auto_open_mic).setChecked(autoOpenMic);        EvaAppSetup.autoOpenMicrophone = autoOpenMic;        boolean autoOpenMicOnQuestion = prefs.getBoolean("auto_open_mic_on_q", false);        menu.findItem(R.id.nav_auto_open_mic_on_question).setChecked(autoOpenMicOnQuestion);        EvaAppSetup.autoOpenMicrophoneOnQuestion = autoOpenMicOnQuestion;    }    @Override    protected void onPause() {        super.onPause();        LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(this);        localBroadcastManager.unregisterReceiver(gcmTokenReceiver);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            Intent intent = new Intent(this, SettingsActivity.class);            this.startActivity(intent);            return true;        }        if (id == R.id.voice_search) {            EvaChatTrigger.startSearchByVoice(MainActivity.this, null, true, true);            return true;        }        return super.onOptionsItemSelected(item);    }    private EvaAppScope[] getScopeFromPreference() {        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);        ArrayList<EvaAppScope> scopeList = new ArrayList<>();        if (prefs.getBoolean("scope_car", false)) {            scopeList.add(EvaAppScope.Car);        }        if (prefs.getBoolean("scope_cruise", false)) {            scopeList.add(EvaAppScope.Cruise);        }        if (prefs.getBoolean("scope_flight", false)) {            scopeList.add(EvaAppScope.Flight);        }        if (prefs.getBoolean("scope_hotel", false)) {            scopeList.add(EvaAppScope.Hotel);        }        if (prefs.getBoolean("scope_explore", false)) {            scopeList.add(EvaAppScope.Explore);        }        return scopeList.toArray(new EvaAppScope[scopeList.size()]);    }    @SuppressWarnings("StatementWithEmptyBody")    @Override    public boolean onNavigationItemSelected(MenuItem item) {        // Handle navigation view item clicks here.        int id = item.getItemId();        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);        SharedPreferences.Editor edit = prefs.edit();        // normally your app scope won't change and would be hard-coded once when the application loads,        // eg.  something like  EvaAppSetup.setScope(EvaAppScope.Flight, EvaAppScope.Hotel);        // for example purposes we allow changing the app scope        //if (id == R.id.nav_hotel || id == R.id.nav_flight || id == R.id.nav_car || id == R.id.nav_cruise) {            item.setChecked(!item.isChecked());            switch (id) {                case R.id.nav_car:                    edit.putBoolean("scope_car", item.isChecked());                    break;                case R.id.nav_cruise:                    edit.putBoolean("scope_cruise", item.isChecked());                    break;                case R.id.nav_flight:                    edit.putBoolean("scope_flight", item.isChecked());                    break;                case R.id.nav_hotel:                    edit.putBoolean("scope_hotel", item.isChecked());                    break;                case R.id.nav_explore:                    edit.putBoolean("scope_explore", item.isChecked());                    break;                case R.id.nav_auto_open_mic:                    edit.putBoolean("auto_open_mic", item.isChecked());                    EvaAppSetup.autoOpenMicrophone = item.isChecked();                    break;                case R.id.nav_auto_open_mic_on_question:                    edit.putBoolean("auto_open_mic_on_q", item.isChecked());                    EvaAppSetup.autoOpenMicrophoneOnQuestion = item.isChecked();                    break;            }            edit.commit();            EvaAppScope[] scopeArr = getScopeFromPreference();            EvaAppSetup.setScope(scopeArr);//        } else {//            if (id == R.id.nav_send) {//                // TODO: handle send feedback//            }//            DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);//            drawer.closeDrawer(GravityCompat.START);//            return true;//        }        return false;    }    // utility class to show some data on the screen in an ExpandableList    private class DataShower {        ArrayList<CharSequence> rows;        DataShower(String header) {            String headerIndexed  = (listDataHeader.size()+1) + ". "+header;            listDataHeader.add(headerIndexed);            rows = new ArrayList<>();            listDataChild.put(headerIndexed, rows);            MainActivity.this.runOnUiThread(new Runnable() {                @Override                public void run() {                    listAdapter.notifyDataSetChanged();                }            });        }        <T> void addText(String title, T text) {            SpannableStringBuilder builder= new SpannableStringBuilder();            StyleSpan boldSpan = new StyleSpan(android.graphics.Typeface.BOLD);            builder.append(title+": ", boldSpan, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)                    .append(String.valueOf(text));            rows.add(builder);            MainActivity.this.runOnUiThread(new Runnable() {                @Override                public void run() {                    listAdapter.notifyDataSetChanged();                }            });        }        void addList(String title, String delimiter, Object... data) {            addText(title, TextUtils.join(delimiter, data));        }    }    @Override    public void initResult(final InitResultEnum result, final String msg, final Exception e) {        Handler mainHandler = new Handler(this.getMainLooper());        Runnable myRunnable = new Runnable() {            @Override            public void run() {                DataShower initData = new DataShower("Init Result - " + result.toString());                if (msg != null) {                    initData.addText("Err", msg);                }                if (e != null) {                    initData.addText("Excp", e.toString());                }                if (EvaAppSetup.gcmToken != null) {                    initData.addText("Token", EvaAppSetup.gcmToken);                }                TextView tv = (TextView) findViewById(R.id.mainTextView);                if (msg != null) {                    tv.setText("Error: "+msg);                }                else {                    tv.setVisibility(View.GONE);                }            }        };        mainHandler.post(myRunnable);    }    @Override    public EvaResult showReservation() {        new DataShower("Show Reservation");        SpannableStringBuilder builder = new SpannableStringBuilder();        builder.append("Here is your Reservation:\n")                .append("Hilton at Miami, Thursday to Monday", new RelativeSizeSpan(1.5f), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);;        return EvaResult.textResult(builder);    }    @Override    public EvaResult cancelReservation() {        new DataShower("Cancel Reservation");        SpannableStringBuilder builder = new SpannableStringBuilder();        builder.append("Canceling:\n")                .append("Hilton at Miami, Thursday to Monday", new ForegroundColorSpan(Color.RED), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);;        return EvaResult.textResult(builder);    }    @Override    public EvaResult handleCruiseSearch(Context context, boolean isComplete, EvaLocation from, EvaLocation to, Date dateFrom, Date dateTo, Integer durationMin,                                        Integer durationMax, CruiseAttributes attributes, RequestAttributes.SortEnum sortBy, RequestAttributes.SortOrderEnum sortOrder) {        DataShower data = new DataShower("Cruise Search Callback "+(isComplete ? " Done!" : " (ongoing)"));        data.addText("isComplete", isComplete);        if (from != null)            data.addText("from", from.name);        if (to != null)            data.addText("to", to.name);        if (dateFrom != null) {            data.addList("date", " - ", dateFrom, dateTo);        }        if (durationMin != null) {            data.addList("duration", " - ", durationMin, durationMax);        }        if (isComplete) {            // no need count when we trigger            return EvaResult.defaultHandling(true);        }        // async count - slow result        return EvaResult.countResult( new FutureTask(new Callable() {            public Integer call() {                try {                    Thread.sleep(1800); // fake getting data from slow server                } catch (InterruptedException e) {                    return null;                }                Random r = new Random();                int count = r.nextInt(200) - 100;                if (count < -50) count = 0;                if (count < 0) count = 1;                return count;            }        }));    }    @Override    public EvaResult handleFlightSearch(Context context, boolean isComplete, EvaLocation origin, EvaLocation destination,                                        Date departDateMin, Date departDateMax, Date returnDateMin, Date returnDateMax,                                        EvaTravelers travelers, FlightAttributes attributes,                                        RequestAttributes.SortEnum sortBy, RequestAttributes.SortOrderEnum sortOrder) {        DataShower data = new DataShower("Flight Search Callback "+(isComplete ? " Done!" : " (ongoing)"));        data.addText("isComplete", isComplete);        if (origin != null)            data.addText("origin", origin.airportCode()+(origin.airports != null ? (" - "+ TextUtils.join(",", origin.airports)) : ""));        if (destination != null)            data.addText("destination", destination.airportCode()+(destination.airports != null ? (" - "+ TextUtils.join(",", destination.airports)) : ""));        if (departDateMin != null) {            data.addList("depart", " - ", departDateMin, departDateMax);        }        if (returnDateMin != null) {            data.addList("return", " - ", returnDateMin, returnDateMax);        }        if (isComplete) {            // no need count when we trigger            return EvaResult.defaultHandling(true);        }        // return count in a sync        EvaResult result = EvaResult.defaultHandling();        Random r = new Random();        int count = r.nextInt(200) - 100;        if (count < -50) count = 0;        if (count < 0) count = 1;        result.setCountResult(count);        return null;    }    @Override    public EvaResult handleHotelSearch(Context context, boolean isComplete, EvaLocation location, Date arriveDateMin, Date arriveDateMax,                                       Integer durationMin, Integer durationMax, EvaTravelers travelers, HotelAttributes attributes, RequestAttributes.SortEnum sortBy, RequestAttributes.SortOrderEnum sortOrder) {        DataShower data = new DataShower("Hotel Search Callback "+(isComplete ? " Done!" : " (ongoing)"));        data.addText("isComplete", isComplete);        if (location != null) {            data.addText("location", location.name + " ("+location.latitude + ":"+location.longitude +")"+" - "+location.countryCode+": "+location.countryName+" "+location.state);        }        if (arriveDateMin != null) {            data.addList("arrive", " - ", arriveDateMin, arriveDateMax);        }        if (durationMin != null) {            data.addList("duration", " - ", durationMin, durationMax);        }        if (travelers != null) {            data.addList("travelers", ", ", travelers.getAllAdults(), travelers.getAllChildren());        }        if (attributes.chains != null && attributes.chains.size() != 0) {            data.addList("chains", ", ", attributes.chains);        }        if (isComplete) {            // no need count when we trigger            return EvaResult.defaultHandling(false);        }        // async count - quick return        EvaResult result = EvaResult.countResult( new FutureTask(new Callable() {            public Integer call() {                try {                    Thread.sleep(800); // fake getting data from slow server                } catch (InterruptedException e) {                    return null;                }                Random r = new Random();                int count = r.nextInt(2000)+5;                if (count < 0) {                    count = 0;                }                return count;            }        }));        return result;    }    @Override    public EvaResult navigateTo(Context context, FlightPageType page) {        DataShower data = new DataShower("Flight Navigate Callback - "+page);        data.addText("Page", page.toString());        SpannableStringBuilder builder= new SpannableStringBuilder();        switch (page) {            case BoardingPass:                builder.append("Your boarding pass: \n")                        .append("Flight 318U,  Terminal B, Gate 9, 9:32am", new RelativeSizeSpan(1.5f), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);                return EvaResult.textResult(builder);            case ArrivalTime: {                EvaResult immediate = EvaResult.textResult("Your arrival time is ");                FutureTask<EvaResult> delayed = new FutureTask(new Callable() {                    public EvaResult call() {                        try {                            Thread.sleep(2000); // fake getting data from slow server                        } catch (InterruptedException e) {                            return null;                        }                        SpannableStringBuilder builder2 = new SpannableStringBuilder();                        builder2.append("12:51pm", new ForegroundColorSpan(Color.YELLOW), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);                        EvaResult delayed = EvaResult.textResult(builder2);                        delayed.setAppendToExistingText(true); // appending to previous sayit                        return delayed;                    }                });                return EvaResult.delayedResult(immediate, delayed);            }            case DepartureTime:                builder.append("Your departure time is ")                        .append("9:32am", new ForegroundColorSpan(Color.YELLOW), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);                return EvaResult.textResult(builder.toString()+", Please hurry!", builder);            case BoardingTime:                builder.append("Your boarding time is ")                        .append("9:22am", new ForegroundColorSpan(Color.YELLOW), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)                        .append(", Please hurry!");                return EvaResult.textResult(builder);            case Gate:                builder.append("Gate ")                        .append("9", new ForegroundColorSpan(Color.BLUE), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);                return EvaResult.textResult(builder);            case Itinerary: {                // crazy example chaining 3 delayed results - not very pretty but really I don't think this is a normal use case                EvaResult immediate = EvaResult.textResult("", "Loading your itinerary..."); // no say-it, only display-it                return EvaResult.delayedResult(immediate,                        new FutureTask(new Callable() {                        public EvaResult call() {                            try {                                Thread.sleep(3500); // fake getting data from slow server                            } catch (InterruptedException e) {                                return null;                            }                            SpannableStringBuilder builder2 = new SpannableStringBuilder();                            builder2.append("Your Itinerary:\n Flight ")                                    .append("369E", new ForegroundColorSpan(Color.RED), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)                                    .append(" from ABC to DEF");                            return EvaResult.delayedResult(EvaResult.textResult(builder2), new FutureTask(new Callable() {                                public EvaResult call() {                                    try {                                        Thread.sleep(2500); // fake getting data from slow server                                    } catch (InterruptedException e) {                                        return null;                                    }                                    SpannableStringBuilder builder2 = new SpannableStringBuilder();                                    builder2.append("\n Flight ")                                            .append("258V", new ForegroundColorSpan(Color.RED), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)                                            .append(" from GHI to JKL");                                    EvaResult delayed2 = EvaResult.delayedResult(EvaResult.textResult(builder2),                                            new FutureTask(new Callable() {                                                public EvaResult call() {                                                    try {                                                        Thread.sleep(2500); // fake getting data from slow server                                                    } catch (InterruptedException e) {                                                        return null;                                                    }                                                    SpannableStringBuilder builder3 = new SpannableStringBuilder();                                                    builder3.append("\n Flight ")                                                            .append("147A", new ForegroundColorSpan(Color.RED), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)                                                            .append(" from MNO to PQR");                                                    EvaResult finalResult =  EvaResult.textResult(builder3);                                                    finalResult.setAppendToExistingText(true);                                                    return finalResult;                                                }                                            }));                                    delayed2.setAppendToExistingText(true); // appending to previous sayit                                    return delayed2;                                }                            }));                        }                    })                );            }        }        return null;    }    @Override    public void handleMissingPermissions(Activity activity, String[] missingPermissions) {        DataShower ds = new DataShower("Missing Permissions");        ds.addList("perms", ", ", missingPermissions);        // Should we show an explanation?        if (ActivityCompat.shouldShowRequestPermissionRationale(activity,                missingPermissions[0])) {            Toast.makeText(activity, "Permissions are needed to search by voice", Toast.LENGTH_LONG).show();        }        ActivityCompat.requestPermissions(activity,                missingPermissions,                1234); // don't care to listen to the request response    }}